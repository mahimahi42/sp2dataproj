#BlueJ class context
comment0.params=
comment0.target=LinkedList()
comment0.text=\n\ Primary\ constructor.\n\ Creates\ a\ new\ empty\ <code>LinkedList</code>.\n
comment1.params=num
comment1.target=void\ insertAtBack(int)
comment1.text=\n\ Adds\ a\ value\ to\ the\ end\ of\ the\ list.\n\ Creates\ a\ new\ <code>Node</code>\ to\ hold\ the\ data,\n\ then\ adds\ it\ to\ the\ end\ of\ the\ <code>LinkedList</code>.\n\ \n\ @param\ num\ data\ to\ insert\n
comment2.params=num
comment2.target=void\ insertAtFront(int)
comment2.text=\n\ Adds\ a\ value\ to\ the\ beginning\ of\ the\ list.\n\ Creates\ a\ new\ <code>Node</code>\ to\ hold\ the\ data,\n\ then\ adds\ it\ to\ the\ beginning\ of\ the\ \n\ <code>LinkedList</code>.\n\ \n\ @param\ num\ data\ to\ insert\n
comment3.params=
comment3.target=void\ removeFromBack()
comment3.text=\n\ Removes\ the\ last\ <code>Node</code>.\n\ If\ the\ list\ is\ empty,\ it\ tells\ the\ user.\ Otherwise,\n\ it\ removes\ the\ last\ <code>Node</code>\ in\ the\n\ </code>LinkedList</code>\n
comment4.params=
comment4.target=void\ removeFromFront()
comment4.text=\n\ Removes\ the\ first\ <code>Node</code>.\n\ If\ the\ list\ is\ empty,\ it\ tells\ the\ user.\ Otherwise,\n\ it\ removes\ the\ first\ <code>Node</code>\ in\ the\n\ </code>LinkedList</code>\n
comment5.params=
comment5.target=int\ getMaxValue()
comment5.text=\n\ Gets\ the\ maximum\ value.\n\ Traverses\ the\ list\ and\ finds\ the\ largest\ <code>int</code>\n\ data\ stored,\ returning\ it.\ Assumes\ all\ integers\ are\n\ positive.\n\ \n\ @return\ the\ max\ <code>int</code>\ in\ the\ list\n
comment6.params=
comment6.target=Node\ getMaxReference()
comment6.text=\n\ Gets\ the\ <code>Node</code>\ with\ the\ maximum\ data.\n\ Traverses\ the\ list\ to\ find\ the\ <code>Node</code>\ \n\ containing\ the\ data\ returned\ by\ <code>getMaxValue</code>.\n\ Assumes\ all\ values\ in\ the\ list\ are\ positive.\n\ \n\ @return\ <code>Node</code>\ with\ maximum\ data\n
comment7.params=
comment7.target=void\ maxToBack()
comment7.text=\n\ Moves\ the\ largest\ data\ to\ the\ back.\n\ If\ the\ list\ is\ empty,\ does\ nothing.\ Otherwise,\ moves\n\ the\ <code>Node</code>\ with\ the\ largest\ stored\ value\n\ to\ the\ back\ of\ the\ <code>LinkedList</code>.\n
comment8.params=
comment8.target=boolean\ isEmpty()
comment8.text=\n\ Returns\ <code>true</code>\ if\ the\ list\ is\ empty.\n\ Otherwise,\ returns\ <code>false</code>.\n\ \n\ @return\ <code>true</code>\ if\ the\ list\ is\ empty,\ <code>false</code>\ otherwise.\n
comment9.params=
comment9.target=void\ printList()
comment9.text=\n\ Prints\ a\ readable\ representation\ of\ the\ list.\n\ If\ the\ list\ is\ empty,\ informs\ the\ user.\ Otherwise,\n\ prints\ a\ representation\ of\ the\ <code>int</code>\ values\n\ in\ the\ list\ in\ the\ following\ format\:\n\ <p>\n\ 1\ -->\ 2\ -->\ 3\ -->\ 4\n
numComments=10
